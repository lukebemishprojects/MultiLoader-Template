plugins {
    id 'java-library'
    id 'maven-publish'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
java.withSourcesJar()
java.withJavadocJar()

base {
    archivesName = "${artifact_id}-${project.name}-${libs.versions.minecraft.get()}"
}

repositories {
    mavenCentral()
    maven {
        name = 'Sponge / Mixin'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
}

dependencies {
    compileOnly libs.jetbrains.annotations
}

['apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements'].each { variant ->
    configurations."$variant".outgoing {
        if (project.name != 'common') {
            capability("$group:$artifact_id-${project.name}-${libs.versions.minecraft.get()}:$version")
        }
        capability("$group:$artifact_id-common-${libs.versions.minecraft.get()}:$version")
    }
    publishing.publications.configureEach {
        suppressPomMetadataWarningsFor(variant)
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId "${artifact_id}-${project.name}-${libs.versions.minecraft.get()}"
            from components.java
        }
    }
}

sourcesJar {
    from("${project.rootDir}/LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}

jar {
    from("${project.rootDir}/LICENSE") {
        rename { "${it}_${mod_name}" }
    }

    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : mod_name + ' - ' + project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Built-On-Minecraft'      : libs.versions.minecraft.get()
        ])
    }
}

static def nextVersion(String version, int idx) {
    def parts = version.split(/\./)
    def part = parts[idx] as int
    part += 1
    parts[idx] = part as String
    for (int i = idx + 1; i < parts.length; i++) {
        parts[i] = "0"
    }
    return parts.join('.')
}

processResources {
    def forgeVersion = libs.versions.forge.forge.get().split(/-/)[1]
    def minecraftVersion = libs.versions.minecraft.get()
    def neoForgeVersion = libs.versions.neoforged.neoforge.get()
    def expandProps = [
            "version": version,
            "group": project.group, //Else we target the task's group.
            "minecraft_version": minecraftVersion,
            "forge_version": forgeVersion,
            "forge_loader_version_range": forge_loader_version_range,
            "forge_version_range": "[${forgeVersion},${nextVersion(forgeVersion, 0)})",
            "minecraft_version_range": "[${minecraftVersion},${nextVersion(minecraftVersion, 1)})",
            "fabric_version": libs.versions.fabric.api.get(),
            "fabric_loader_version": libs.versions.fabric.loader.get(),
            "mod_name": mod_name,
            "mod_author": mod_author,
            "mod_id": mod_id,
            "license": license,
            "description": project.description,
            "neoforge_loader_version_range": neoforge_loader_version_range,
            "neoforge_version": neoForgeVersion,
            "neoforge_version_range": "[${neoForgeVersion},${nextVersion(neoForgeVersion, 0)})",
            "credits": credits
    ]

    filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
        expand expandProps
    }
    inputs.properties(expandProps)
}
